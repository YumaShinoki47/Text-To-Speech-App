# ===========================================
# .env.example - 環境変数のサンプルファイル
# ===========================================
# このファイルを .env にコピーして実際のAPIキーを設定してください

# Gemini API Key (必須)
GEMINI_API_KEY=your_gemini_api_key_here

# サーバー設定 (オプション)
HOST=0.0.0.0
PORT=8000
DEBUG=true

# CORS設定 (オプション)
ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000

# ファイル設定 (オプション)
MAX_FILE_SIZE_MB=10
CLEANUP_INTERVAL_HOURS=1

# ===========================================
# .gitignore - Git無視ファイル
# ===========================================

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# 環境変数
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# 出力ファイル
output/*.wav
output/*.mp3
output/*.m4a
!output/.gitkeep

# ログ
*.log
logs/

# 一時ファイル
tmp/
temp/

# ===========================================
# README.md - プロジェクト説明書
# ===========================================

# 🎤 Text-To-Speech App

Gemini APIを使用したテキスト音声変換アプリケーション

## 🚀 機能

- **多言語対応**: 日本語を含む多言語のテキスト読み上げ
- **複数音声**: 8種類以上の音声から選択可能
- **リアルタイム処理**: ストリーミングによる高速音声生成
- **Webインターフェース**: 直感的で使いやすいUI
- **ダウンロード機能**: 生成した音声をWAVファイルで保存

## 📋 必要要件

- Python 3.8以上
- Gemini API キー
- モダンブラウザ (Chrome, Firefox, Safari, Edge)

## 🛠️ インストール

### 1. リポジトリのクローン
```bash
git clone <repository-url>
cd Text-To-Speech-App
```

### 2. 仮想環境の作成
```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
# または
venv\Scripts\activate     # Windows
```

### 3. 依存関係のインストール
```bash
cd backend
pip install -r requirements.txt
```

### 4. 環境変数の設定
```bash
cp .env.example .env
# .envファイルを編集してGEMINI_API_KEYを設定
```

## 🚀 使用方法

### バックエンドサーバーの起動
```bash
cd backend
python app.py
```

### フロントエンドのアクセス
```bash
cd frontend
# 簡易HTTPサーバーを起動 (Python)
python -m http.server 3000

# または (Node.js)
npx serve -s . -l 3000
```

ブラウザで `http://localhost:3000` にアクセス

## 📁 プロジェクト構造

```
Text-To-Speech-App/
├── backend/              # FastAPI バックエンド
│   ├── app.py           # メインAPI
│   ├── tts_generator.py # 音声生成クラス
│   └── requirements.txt # 依存関係
├── frontend/            # Webフロントエンド
│   ├── index.html       # メインHTML
│   ├── css/main.css     # スタイルシート
│   └── js/              # JavaScript
├── output/              # 生成音声ファイル
└── README.md           # このファイル
```

## 🎯 API エンドポイント

| エンドポイント | メソッド | 説明 |
|---------------|---------|------|
| `/` | GET | ヘルスチェック |
| `/health` | GET | サーバー状態確認 |
| `/voices` | GET | 利用可能音声一覧 |
| `/generate-speech` | POST | 音声生成 |
| `/download/{file_id}` | GET | 音声ダウンロード |
| `/cleanup` | DELETE | 古いファイル削除 |

## 🔧 設定

### 環境変数

- `GEMINI_API_KEY`: Gemini APIキー (必須)
- `HOST`: サーバーホスト (デフォルト: 0.0.0.0)
- `PORT`: サーバーポート (デフォルト: 8000)
- `DEBUG`: デバッグモード (デフォルト: true)

### 音声設定

利用可能な音声:
- Zephyr (穏やかな声)
- Puck (活発な声)
- Charon (深い声)
- Kore (明るい声)
- その他多数

## 🐛 トラブルシューティング

### よくある問題

1. **サーバーに接続できない**
   - バックエンドサーバーが起動しているか確認
   - ポート8000が使用可能か確認

2. **音声生成に失敗**
   - GEMINI_API_KEYが正しく設定されているか確認
   - API制限に達していないか確認

3. **音声が再生されない**
   - ブラウザが音声再生を許可しているか確認
   - ファイルが正しく生成されているか確認

## 📄 ライセンス

このプロジェクトはMITライセンスの下で公開されています。

## 🤝 貢献

プルリクエストやイシューの報告を歓迎します。

## 📞 サポート

問題や質問がある場合は、GitHubのIssuesページで報告してください。